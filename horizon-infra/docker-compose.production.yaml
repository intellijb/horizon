version: "3.9"

services:
  api:
    image: ghcr.io/intellijb/horizon-fastify:latest
    container_name: horizon_fastify
    restart: unless-stopped
    env_file: .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # 호스트 20000 → 컨테이너 3000 (rabbit과 충돌 회피)
    ports:
      - "${API_PORT:-20000}:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: [horizon_network]

  postgres:
    image: postgres:17.5-alpine
    container_name: horizon_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: horizon
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: horizon
    volumes:
      - horizon_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U horizon -d horizon"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks: [horizon_network]

  redis:
    image: redis:7.2-alpine
    container_name: horizon_redis
    restart: unless-stopped
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--save",
        "60",
        "1",
        "--requirepass",
        "${REDIS_PASSWORD}",
      ]
    volumes:
      - horizon_redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} PING | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks: [horizon_network]

networks:
  horizon_network:
    name: horizon_network
    driver: bridge

volumes:
  horizon_postgres_data:
    name: horizon_postgres_data
  horizon_redis_data:
    name: horizon_redis_data
